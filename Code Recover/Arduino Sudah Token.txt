#include <LiquidCrystal_I2C.h>
#include <Keypad.h>
#include <EEPROM.h>
#include <MFRC522.h>
#include <SPI.h>

#define SS_PIN 5
#define RST_PIN 25
#define FLOW_SENSOR_PIN 34
#define RELAY 26 // Relay pin
#define BUZZER 17 // Buzzer pin
#define ACCESS_DELAY 2000
#define DENIED_DELAY 1000
MFRC522 mfrc522(SS_PIN, RST_PIN);   // Create MFRC522 instance

// Global variables
volatile int pulseCount = 0;
float volume = 0.0;       // Volume of used water
float saldo = 0.0;
const float kalibrasi = 4.5; // Calibration factor for the flow meter
const int EEPROM_SIZE = 512; // EEPROM size sufficient for ESP32
const int EEPROM_SALDO_ADDR = 0;// Address to store saldo in EEPROM
const int EEPROM_SALDO_RFID = 0;
float lastSavedSaldo = saldo;

unsigned long lastPulseTime = 0;  // To debounce the pulseCounter

// Interrupt function for flow sensor
void IRAM_ATTR pulseCounter() {
  unsigned long currentTime = millis();
  
  // Simple debounce: only count pulse if it's been more than 50ms since the last one
  if (currentTime - lastPulseTime > 50) {
    pulseCount++;
    lastPulseTime = currentTime;
  }
}

bool inmenu = false; // Apakah pengguna sedang berada di menu?


// Initialize the LCD with I2C address 0x27 (modify address if needed)
LiquidCrystal_I2C lcd(0x27, 16, 2);

// Keypad setup
const byte ROWS = 4;  // Four rows
const byte COLS = 4;  // Four columns
char keys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};
byte rowPins[ROWS] = {4, 0, 2, 15};    // Pin baris
byte colPins[COLS] = {27, 14, 12, 13};  
// Create the Keypad object
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

String input = ""; // Stores the number being typed

String nilai_token[5] ={
  "888822112024", 
  "777723112024",
  "666624112024",
  "555525112024",
  "444426112024"};

int nilai_pulsa[5] = {
  1,
  2,
  3,
  4,
  5};


void setup() {
  Serial.begin(9600);
  EEPROM.begin(EEPROM_SIZE);

  lcd.init();
  lcd.backlight();
  delay(500);

  SPI.begin();
  mfrc522.PCD_Init();
  delay(1000);
  Serial.println("RFID Ready!");

  pinMode(FLOW_SENSOR_PIN, INPUT_PULLUP);
  pinMode(RELAY, OUTPUT);
  pinMode(BUZZER, OUTPUT);
  digitalWrite(RELAY, HIGH);

  attachInterrupt(digitalPinToInterrupt(FLOW_SENSOR_PIN), pulseCounter, RISING);

  EEPROM.get(EEPROM_SALDO_ADDR, saldo);
  if (isnan(saldo)) {
    saldo = 0.0;
  }

  Serial.print("Initial saldo from EEPROM: ");
  Serial.println(saldo);
  lastSavedSaldo = saldo;

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Sistem meter air");
  lcd.setCursor(0, 1);
  lcd.print("Saldo: ");
  lcd.print(saldo, 2);
  lcd.print(" L");
}

void loop() {
  static unsigned long lastUpdateTime = 0;
  check_saldo();

  evaluate_inmenu(inmenu, lastUpdateTime);
  
  char key = keypad.getKey(); // Read the key pressed
  if (key){
  inmenu = true;
  int result = pressing_key(key);

  if (result != -1) { // If a valid result is returne
    select_menu(result); // Pass the result to select_menu
  }
 }
}

int pressing_key(char key) {
    lcd.clear();
    lcd.print("Masukkan Menu :");
    if (key == '#') { // Confirm the input on pressing '#'
      int result = input.toInt();
      input = "";          // Clear the input after selection
      lcd.setCursor(0, 1);
      lcd.print("                "); // Clear the second line
      return result;
    }
    else if (key == 'D') { // Backspace functionality
      if (input.length() > 0) {
        input.remove(input.length() - 1); // Remove the last character
        lcd.setCursor(0, 1);
        lcd.print("                "); // Clear the second line
        lcd.setCursor(0, 1);
        lcd.print(input); // Print the updated input
      }
    }
    else if (isDigit(key)) { // If it's a numeric key (0-9)
      input += key;           // Append to the input string
      lcd.setCursor(0, 1);     // Move to the second line of the LCD
      lcd.print(input);        // Display the current input
    }
  return -1;
 }

void evaluate_inmenu(bool inmenu, unsigned long &lastUpdateTime) {
    Serial.println("Entering evaluate_inmenu...");
    
    if (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
        Serial.println("New RFID card detected!");
        handleRFID();  // Process the RFID card
        return;        // Exit once handled
    }

    if (!inmenu) {
        Serial.println("Displaying flow...");
        display_flow(lastUpdateTime); // Update display or perform logic
        return;
    }

    Serial.println("Inmenu is active, doing nothing.");
}

void check_saldo(){
  if (saldo <= 0) {
    saldo = 0;
    digitalWrite(RELAY, HIGH);
    lcd.setCursor(0, 1);
    lcd.print("Saldo habis!    ");
    tone(BUZZER, 1000, 200);
    delay(1000);
    detachInterrupt(digitalPinToInterrupt(FLOW_SENSOR_PIN));

    if (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
      handleRFID();
    }
    return;
  }
  else {
    pinMode(FLOW_SENSOR_PIN, INPUT_PULLUP);
    attachInterrupt(digitalPinToInterrupt(FLOW_SENSOR_PIN), pulseCounter, RISING);
  }
 }

void display_flow(unsigned long &lastUpdateTime) {
 
  if (millis() - lastUpdateTime >= 100) {
    lastUpdateTime = millis();
    if (pulseCount != 0) {
      float flowRate = (pulseCount / kalibrasi) / 60;  // L/min

      // Only reduce saldo if flowRate is above a small threshold
      if (flowRate > 0.01) {
        volume += flowRate;
        saldo -= flowRate;
        pulseCount = 0;

        lcd.setCursor(0, 0);
        lcd.print("Sistem meter air");
        lcd.setCursor(0, 1);
        lcd.print("Saldo: ");
        lcd.print(saldo, 2);
        lcd.print(" L   ");

        if (abs(saldo - lastSavedSaldo) >= 0.01) {
          EEPROM.put(EEPROM_SALDO_ADDR, saldo);
          EEPROM.commit();
          lastSavedSaldo = saldo;
        }
      }
    }

    digitalWrite(RELAY, saldo > 0 ? LOW : HIGH);
  }
 }

void handleRFID() {
   Serial.print("UID tag :");
   String content = "";
   byte letter;
   for (byte i = 0; i < mfrc522.uid.size; i++) {
      Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
      Serial.print(mfrc522.uid.uidByte[i], HEX);
      content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
      content.concat(String(mfrc522.uid.uidByte[i], HEX));
   }
   Serial.println();
   content.toUpperCase();

   // Reset saldo jika kartu RFID yang cocok ditemukan
   if (content.substring(1) == "D3 02 A4 2C") {
      resetSaldo(); // Memanggil fungsi reset saldo ketika UID tertentu terdeteksi
      delay(1000);
   }

   // Tambah saldo jika kartu RFID penambah saldo yang cocok ditemukan
   else if (content.substring(1) == "A3 20 E8 2A") {
      saldo += 1;
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Sistem meter air");
      lcd.setCursor(0, 1);
      lcd.print("Saldo: ");
      lcd.print(saldo, 2);
      lcd.print(" L");

      EEPROM.put(EEPROM_SALDO_ADDR, saldo);
      EEPROM.commit();
      lastSavedSaldo = saldo;

      if (saldo > 0) {
         pinMode(FLOW_SENSOR_PIN, INPUT_PULLUP);
         attachInterrupt(digitalPinToInterrupt(FLOW_SENSOR_PIN), pulseCounter, RISING);
      }
      delay(1000);

   } else {
      Serial.println("Card not valid for saldo addition.");
   }

   mfrc522.PICC_HaltA();
}

void resetSaldo() {
  saldo = 0.0;
  EEPROM.put(EEPROM_SALDO_ADDR, saldo);
  EEPROM.commit();
  lastSavedSaldo = saldo;
  
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Sistem Meter Air");
  lcd.setCursor(0, 1);
  lcd.print("Saldo: 0.00 L");

  Serial.println("Saldo reset to zero.");

  // Siapkan kembali untuk menerima kartu RFID lain untuk penambahan saldo
  pinMode(FLOW_SENSOR_PIN, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(FLOW_SENSOR_PIN), pulseCounter, RISING);
}

void select_menu(int digit_key) {
  int digit_int = digit_key;
  switch(digit_int) {
    case 1:
      isitoken();
      break;
    case 2:
      monitoring();
      break;
    default:
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Invalid selection");
      delay(1000); // Delay to show message before resetting
      lcd.clear();
      inmenu = false;
      break;
  }
  return;
}

void isitoken() {
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Menu Isi Token");
  delay(2000); // Optional delay to show message before returning
  inmenu = false ;
  Serial.print(inmenu);
  lcd.clear();
  return;
}

void monitoring() {
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Masukkan Token (12 digit)");
  lcd.setCursor(0,1);
  String token = pressing_token();
  evaluate_token(token);
  lcd.clear();
  inmenu = false ; 
  check_saldo();
  Serial.print(inmenu);
}

String pressing_token(){
  String input_token= "";
  while (true){
    char key = keypad.getKey(); // Read the key pressed
    if (key) { // If a key is pressed
      if (key == '#') { // Confirm the inpu
        lcd.clear();
        lcd.print("Token Confirmed!");
        delay(2000);  // Briefly display confirmation
        lcd.clear();
        inmenu = false; // Exit inmenu mode
        check_saldo();  // Proceed with saldo checking or other logic
        return input_token;
      } 
      else if (key == 'D') { // Backspace functionality
        if (input_token.length() > 0) {
          input_token.remove(input.length() - 1); // Remove the last character
          lcd.setCursor(0, 1);
          lcd.print("                "); // Clear the second line
          lcd.setCursor(0, 1);
          lcd.print(input_token); // Display the updated input
        }
      } 
      else if (isDigit(key)) { // If it's a numeric key (0-9)
        if (input_token.length() < 12) { // Limit input to 12 digits
          input_token += key;            // Append the key to the input
          lcd.setCursor(0, 1);     // Move to the second line
          lcd.print(input_token);        // Display the current input
        } else {
          lcd.setCursor(0, 1);
          lcd.print("Max Digits Reached");
          delay(1000);
          lcd.setCursor(0, 1);
          lcd.print(input_token); // Redisplay current input
        }
      }
    }
  }
}

void evaluate_token(String input_token){
  for (int i = 0; i < 5;++i){
    if (nilai_token[i] == input_token){
      int pulsa = nilai_pulsa[i];
      saldo = saldo + pulsa;
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print("Berhasil Mengisi Token!");
      lcd.setCursor(0,1);
      lcd.print("Saldo: ");
      lcd.print(saldo, 2);
      lcd.print(" L   ");
      delay(3000);
      inmenu = false;
      break;
      }
     else if (nilai_token[i] != input_token) {
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print("Invalid Token!");
      delay(3000);
      inmenu = false;
      break;
      }
     else{
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print("Error!!");
      delay(3000);
      inmenu = false;
      break;
      }
    }
 
  
  }